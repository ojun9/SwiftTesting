import XCTest
import Testing
@testable import SwiftTesting

/// ## 概要

/// テストは開発者にとって、書いたコードが期待通りに機能していることを証明する手段となる。
/// コードが正しく機能していない場合、バグトラッカーがよく用いられ、根本的な問題を修正するために必要な作業を追跡する。
/// 特定のバグを再現または修正を検証するテストと関連付けること有用である。

/// - 注意: このドキュメントで述べられている "Bugs" は "issues" とも呼ばれることがある。
/// テストライブラリの ``Issue`` タイプとの混同を避けるため、このドキュメントでは一貫してそれらを "bugs" として参照している。



/// ## テストとバグの関連付け

/// テストとバグを関連付けるには、`Trait/bug(_:relationship:)-duvt` または `Trait/bug(_:relationship:)-40riy` 関数を使用する。
/// この関数の最初の引数はバグトラッキングシステムにおけるバグの 識別子 である：



struct MyValue4 {
    let value: Int
}


@Test(.comment("バグの関連付け"), .bug("bug: 文字列だよ"), .bug(1110))
func assosiatedBugs() {
    let myValue = MyValue3(value: 100)
    #expect(myValue.value == 100)
}


/// バグ識別子は整数または文字列として指定することができる。（Numericに対応してればおk）
/// 文字列として指定され、特定のフォーマットに一致する場合、テスティングライブラリはそれに関する追加情報を推測することができる。
/// テスティングライブラリが認識するフォーマットの詳細については、doc:BugIdentifiers を参照していただきたい。


/// ## バグとテストの関係の明示

/// デフォルトでは、バグとテストの関係の性質は未指定である。
/// テスティングライブラリは、そういった関係が存在することだけを知っている。

/// バグとテストの関係をカスタマイズすることは可能である。
/// そうすることで、テスティングライブラリは特定の仮定を行うことができる。
/// 例えば、テストが失敗することが期待されていたり、失敗が開発者の注意を必要とするリグレッションを示していたりする。

/// バグがテストにどのように関連しているのかを明示するために、`Trait/bug(_:relationship:)-duvt` もしくは `Trait/bug(_:relationship:)-40riy` 関数の `relationship` パラメータを使用する。例えば、テストが以前に修正されたバグを検証するために書かれたことを示すためには、`.verifiesFix` を指定する：

@Test(.comment("バグの関連付けその２"), .bug("12345", relationship: .verifiesFix))
func assosiatedBugs2() {
    let myValue = MyValue3(value: 100)
    #expect(myValue.value == 100)
}


/// ### 関係の種類

/// テスティングライブラリは、いくつかの一般的なバグ/テストの関係を定義している：

/// .uncoveredBug        テスト実行が失敗し、問題のバグを明らかにした。
/// .reproducesBug       バグが以前に報告され、それを実演するためのテストが書かれていた。
/// .verifiesFix         バグが修正され、テストがそれが再発しないことを示している。
/// .failingBecauseOfBug テストは以前は通っていたが、今は関連しないバグがそれを失敗させている。
/// .unspecified         他のケースが関係を正確に説明していない。

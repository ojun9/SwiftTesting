import XCTest
import Testing
@testable import SwiftTesting

// # 概要
//
// コメントをコードに追加することは、以下の目的でよく有用です：
//
// - コードの目的に関するコンテキストや背景情報を提供するため。
// - 複雑なコードがどのように実装されているかを説明するため。
// - 問題の診断時に役立つかもしれない詳細を含めるため。
//
// テストコードも例外ではなく、説明的なコードコメントから利益を得ることができるが
// テストの問題はしばしば、テストのソースコードが利用できない場所、たとえば継続的インテグレーション（CI）インターフェースやログファイルで示される
//
// これらのコンテキストでテストに関連するコメントを見ることは、問題の診断をより迅速に行うのに役立つ
// コメントはテスト宣言に追加することができ、テストライブラリは問題が記録されたときに自動的にそれらをキャプチャし、表示する

struct MyValue3 {
    let value: Int
}


/// @Testの上についてるコメントは、**Testが落ちた時に**ログに出力されるよ
/// `//`・`///`・`/**/`・`/** */`がサポートされてるよ
@Test func valueTest() {
    let myValue = MyValue3(value: 100)
    #expect(myValue.value == 100)
}

// コメントのコンテンツに対してより正確な制御を行うために、コメントは`@Test`属性へのトレイト引数として明示的に指定することにより、プログラム的にテストに追加することが可能
// プログラム的にコメントを追加することにより、コメントのコンテンツやフォーマットの制御がより正確に行える
// また、開発者が一箇所でコメントを定義し、複数のテストからそれらを参照することを可能にすることで、繰り返しを減らすのにも役立つ
//
//  プログラム的にテストにコメントを追加するには、`Trait/comment(_:)`を使用し、コメント文字列を指定する

@Test(.comment("これがこのメソッドのコメント。テストが失敗するとdebugViewに表示される"))
func valueTest2() {
    let myValue = MyValue3(value: 100)
    #expect(myValue.value == 100)
}

// 通常のコードと同様に、テストに対するコメントは、以下の場合に通常最も役立つ

// - コードを読むだけでは明らかでない情報を追加する場合。
// - テストの操作や動機に関する役立つ情報を提供する場合。

// テストがバグや問題に関連している場合、コメントの代わりに Bug トレイトの使用を検討してね
// 詳細については、doc:AssociatingBugsを参照すること

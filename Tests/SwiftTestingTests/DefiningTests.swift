import XCTest
import Testing
@testable import SwiftTesting



/// # テスト関数の定義
///
/// コードが正しく動作していることを検証するテスト関数を定義する。
///
/// ## 概要
///
/// Swiftパッケージやプロジェクトのテスト関数を定義するのは簡単だ。
///
/// この記事では、テストされるパッケージやプロジェクトはすでにテストターゲットで設定されていることを前提としている。
/// テストライブラリを使用するためのパッケージ設定の手助けには、doc:TemporaryGettingStartedを参照する。

/// ## テストライブラリのインポート
///
/// テストライブラリをインポートするには、テストを含むSwiftソースファイルに以下を追加する。

/// ```
/// import Testing
/// ```

/// 注意：テストライブラリはテストターゲットにのみインポートする。
/// アプリケーション、ライブラリ、またはバイナリターゲットにテストライブラリをインポートすることはサポートされておらず、推奨されていない。
/// リリース用にビルドする際に、テスト関数はバイナリから削除されないため、テスト関数を含むビルド製品を調査する誰でもテストのロジックやフィクスチャを見ることができる。



/// ## テスト関数の宣言
///
/// テスト関数を宣言するには、任意の引数を取らないSwift関数宣言を記述し、その名前の前に @Test 属性を付ける。

/// ```swift
/// @Test func foodTruckExists() {
///   // テストロジックはここに記述される。
/// }
/// ```
///
/// このテスト関数は、ファイルスコープまたはタイプ内に存在することができる。
/// テスト関数を含むタイプは自動的に テストスイート となり、@Suite 属性でオプショナルに注釈を付けることができる。
/// スイートに関する詳細は、doc:OrganizingTestsを参照する。

/// この関数は有効なテスト関数であるが、実際には何のアクションもコードテストも実行しないことに注意する。
/// テスト関数内で期待値や結果を確認するには、テスト関数にexpectationsを追加する。

/// ## テストの名前のカスタマイズ

/// IDEやコマンドラインで表示されるテスト関数の名前をカスタマイズするには、@Test 属性への引数として文字列リテラルを提供する。

/// ```swift
/// @Test("Food truck exists") func foodTruckExists() { ... }
/// テスト関数の外観や動作をさらにカスタマイズするには、Trait/tags(_:)-yg0iのようなtraitsを使用する。
/// ```


/// ## 並行またはスローイングテストの記述

/// 他のSwift関数と同様に、テスト関数はasyncおよびthrowsとマークされ、それぞれ並行またはスローイングとして注釈される。テストが主アクターの実行コンテキスト（つまり、プロセスのメインスレッド）でのみ安全に実行できる場合、@MainActorで注釈される:

/// ```swift
/// @Test @MainActor func foodTruckExists() async throws { ... }
/// ```


/// ## テストの利用可能性を制限する

/// テスト関数が新しいバージョンのオペレーティングシステムやSwift言語でのみ実行できる場合、宣言時に`@available`属性を使用する。
/// @available属性のmessage引数を使用して、テストが利用可能性が制限されているために実行できない場合にログに記録するメッセージを指定する:

/// ```swift
/// @available(macOS 11.0, *)
/// @available(swift, introduced: 5.9, message: "Requires Swift 5.9 features to run")
/// @Test func foodTruckExists() { ... }
/// ```



/// ## Topics
///
/// - ``Test``
/// - ``Test(_:_:)``
///
/// ## See Also
///
/// - <doc:Expectations>
/// - <doc:ParameterizedTesting>
